// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: src/api/message/contract/v1/contract.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _contract_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Contract with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Contract) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContractValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetName()) > 50 {
		return ContractValidationError{
			field:  "Name",
			reason: "value length must be at most 50 runes",
		}
	}

	if len(m.GetContent()) > 500 {
		return ContractValidationError{
			field:  "Content",
			reason: "value length must be at most 500 bytes",
		}
	}

	if len(m.GetSignDate()) < 1 {
		return ContractValidationError{
			field:  "SignDate",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// ContractValidationError is the validation error returned by
// Contract.Validate if the designated constraints aren't met.
type ContractValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContractValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContractValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContractValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContractValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContractValidationError) ErrorName() string { return "ContractValidationError" }

// Error satisfies the builtin error interface
func (e ContractValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContract.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContractValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContractValidationError{}

// Validate checks the field values on GetContractsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetContractsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPage() == nil {
		return GetContractsRequestValidationError{
			field:  "Page",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetContractsRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetContractsRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetContractsRequestValidationError is the validation error returned by
// GetContractsRequest.Validate if the designated constraints aren't met.
type GetContractsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContractsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContractsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContractsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContractsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContractsRequestValidationError) ErrorName() string {
	return "GetContractsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetContractsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContractsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContractsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContractsRequestValidationError{}

// Validate checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Filter) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := FilterColumns_name[int32(m.GetColumn())]; !ok {
		return FilterValidationError{
			field:  "Column",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for Value

	if _, ok := v1.FilterOperation_name[int32(m.GetOperation())]; !ok {
		return FilterValidationError{
			field:  "Operation",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// FilterValidationError is the validation error returned by Filter.Validate if
// the designated constraints aren't met.
type FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterValidationError) ErrorName() string { return "FilterValidationError" }

// Error satisfies the builtin error interface
func (e FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterValidationError{}
